

Backend Report - ParkVision

What went well:
    - Completed the core Flask application and developed several REST API endpoints to begin integration with the frontend.
    - Built a working Docker setup that spins up the Flask app and PostgreSQL server with all dependencies installed.
    - Wrote multiple unit tests to validate endpoint functionality, parking spot detection, occupancy (car) detection algorithms, and database population.
    - Began extensive documentation:
        - Endpoint descriptions for frontend integration.
        - Docker usage instructions.
        - Overview of the computer vision approach.
    - Cleaned up the backend codebase by removing obsolete and primitive test code to improve maintainability.

What didn't go well:
    - Some features are still under development, including:
        - Metrics/analytics functionality and endpoints for parking trends.
        - Admin authentication and login functionality.
    - Integration with frotend is still partial.

Ideas/Actions:
    - Finish implementing:
        - Parking metric endpoints.
        - Admin login/authentication and respective routes.
    - Continue refining backend documentation.
    - Support frontend to begin integration with our systems.


Frontend Report

What went well:
    - Completed the Admin and login page visuals, providing a cleaner and more intuitive UI.
    - Updated the main dashboard to better accommodate new features and backend APIs.
    - Successfully integrated TypeScript across the frontend for better type safety and maintainability.
    - Created reusable components for forms and layout to speed up development.

What didn't go well:
    - Still need to fully integrate key routes from the backend (e.g., /initialize_lot, /lot_status/<id>, /admin/login).
    - Encountered issues with cross-origin requests and session handling between the frontend and Flask backend.
    - Some planned features for the MVP, such as real-time lot status updates and camera feed integration, are not yet functional.

Ideas/Actions:
    - Begin wiring up REST API calls in a centralized api.tsx service using Axios.
    - Store admin session status securely on the frontend and use it to guard admin-only pages.
    - Improve documentation for setting up the frontend and coordinating with the backend team on endpoint usage.
    - Add support for video input selection and previews on the lot initialization page.
    - Start integrating feedback and error handling for failed API responses (e.g., invalid login, missing data).


Database Report

What went well:
    -

What didn't go well:
    -

Ideas/Actions:
    -