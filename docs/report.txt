Report Requirements:

1. Project Summary (1-2 paragraphs)
ParkVision is a smart parking management system that aims to reduce inefficiency in high-traffic parking areas through real-time vehicle detection and occupancy tracking. 
The system uses computer vision to process live camera feeds, detect parked vehicles, and visually map their positions onto a user-friendly dashboard. 
This allows drivers to locate available spots more easily while giving administrators real-time insights into lot usage.

The original project scope has remained largely intact, but adjustments have been made in the choice of tools and technologies. 
While the initial plan included exploring multiple frameworks for the dashboard, we chose to move forward with React due to its component-based design and flexibility for future expansion. 
We also simplified some design elements early on to focus on delivering a clean and functional minimum viable product.

2. Development Progress to Date
The backend development has progressed smoothly. So far, a skeleton for the actual backend app code has been established. This will streamline the future integration of our React dashboard and the OpenCV components when they are flushed out.
For the OpenCV implementations within ParkVision, we have been mostly exploring the various utilities the package provides. We created several test programs to begin developing the necessary components for the system. One key feature allows for the definition of parking spots and car detection. We can now manually define parking spots by selecting opposite corners when prompted. Once defined,  the spot objects are stored into a JSON file for future use. We then defined three different car detection algorithms but currently, we are using an algorithm that detects cars from background subtraction. Very simply, this takes an image of the empty parking lot and the used parking lot, creates an image of the absolute difference between the emtpy and used parking lot images, threshes it, dilates it, and then iterates over the spots in the json file. If the area defined by a spot has a white pixel percentage over 50%, this renders the spot as "occupied".

3. Software Design and Architecture
Overview of System Architecture
-Input Layer: Receives images of cars parked in a parking lot from cameras
-Processing Layer: Applies computer vision algorithms to detect vehicles and determine parking spot occupancy.
-Application Layer: Handles business logic, such as mapping detections to specific parking spaces and managing system configuration.
-Presentation Layer: Provides a web interface for end-users to view parking availability.

Design Patterns Implemented:
-Observer Pattern: Allows UI components or loggers to receive updates when parking spot statuses change.
-Singleton Pattern: Ensures centralized management of system configurations and resources such as camera feeds.

4. Code Management
The project uses Git as the version control system to manage code changes and track development progress.

The repository is structured to ensure clarity and maintainability. Key components of the repository include:
  -Main Branch: This branch contains the production-ready code. It is kept stable and reflects the latest tested release version.
  -Personal Branches: For each person, a separate branch is created for them to work on separately from the main branch. This allows for isolated development of individual components without affecting the overall stability of the codebase.
  -Documentation: A separate folder holds all project-related documentation, including requirements, architecture, and user guides, ensuring that all relevant information is easily accessible.

In this repository, each developer has their own development branch, where they work on different features, bug fixes, or improvements independently. Once a developer completes their work, they submit a pull request to merge their changes into the main branch. This ensures that development is isolated per developer while maintaining a stable main branch.

When a developer completes their work on their branch, they submit a pull request for review. The request is reviewed by at least one other team member, who evaluates the code for quality, consistency, and potential issues. Feedback is provided, and necessary changes are made before merging into the main or development branch. This process ensures that all code is properly reviewed, minimizing errors and ensuring consistent quality throughout the project.

6. Timeline Assessment
Our initial project timeline outlined parallel development tracks for the computer vision system, backend API, and frontend dashboard. 
So far, we have been able to follow this timeline effectively. 
The React-based dashboard is progressing well, and weâ€™ve successfully set up the layout, integrated placeholder visuals, and begun preparing for backend data integration.

No major delays have occurred at this point. 
The upcoming development phases will focus on connecting the backend APIs and finalizing the vehicle detection pipeline. 
If progress continues at the current pace, we expect to stay on schedule and complete all key components in time for the final demo.

7. Next Phase Implementation Plan
In the upcoming development phase, we'd like to focus on automating the OpenCV components. Parking spots should be automatically captured. Our system should also be able to handle various environmental effects such as the camera being at an angle (not exactly overhead) by applying transformations.

We will also begin designing the project's database. We currently have a rough conceptial layout, but we have not formalized the schema. Once this is done, the backend will store the parking spot objects in the database, allowing this data to be accessed and utilized by the frontend application.

Our testing approach involves using a set of curated images. These images include empty parking lots, and parking lots with several occupied spots. Moving forward, we will create more of these images to test more extreme cases (distorted angles, fully occupied lots, vehicles parked outside of defined spots, etc.). This expanded test suite will ensure the system performs reliably under a wider range of real-world conditions.

GitHub Repo:
https://github.com/cooperwooley/parkvision
